
//! Autogenerated weights for `pallet_collator_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-05-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `PAR03651`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local-v")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/mythos-node
// benchmark
// pallet
// --chain=local-v
// --wasm-execution=compiled
// --pallet=pallet_collator_staking
// --steps=50
// --repeat=20
// --extrinsic=*
// --heap-pages=4096
// --output=./weights.rs
// --template=./.maintain/template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_collator_staking`.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn add_invulnerable(b: u32, c: u32, ) -> Weight;
	fn remove_invulnerable(b: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_candidacy_bond() -> Weight;
	fn register_as_candidate(c: u32, ) -> Weight;
	fn take_candidate_slot() -> Weight;
	fn leave_intent(c: u32, ) -> Weight;
	fn note_author() -> Weight;
	fn new_session(r: u32, c: u32, ) -> Weight;
	fn stake(c: u32, ) -> Weight;
	fn unstake_from(c: u32, u: u32, ) -> Weight;
	fn unstake_all(c: u32, s: u32, ) -> Weight;
	fn claim(c: u32, ) -> Weight;
	fn set_autocompound_percentage() -> Weight;
	fn set_collator_reward_percentage() -> Weight;
	fn set_extra_reward() -> Weight;
	fn set_minimum_stake() -> Weight;
	fn stop_extra_reward() -> Weight;
	fn top_up_extra_rewards() -> Weight;
	fn reward_one_collator(c: u32, s: u32, a: u32, ) -> Weight;
	fn refund_stakers(s: u32, ) -> Weight;
}

/// Weights for `pallet_collator_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `200 + b * (65 ±0)`
		//  Estimated: `1190 + b * (2540 ±0)`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(6_984_624, 1190)
			// Standard Error: 5_855
			.saturating_add(Weight::from_parts(2_562_612, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	/// The range of component `c` is `[1, 99]`.
	fn add_invulnerable(b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `890 + b * (20 ±0) + c * (65 ±0)`
		//  Estimated: `7087 + b * (40 ±1) + c * (62 ±0)`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(51_297_298, 7087)
			// Standard Error: 11_725
			.saturating_add(Weight::from_parts(139_437, 0).saturating_mul(b.into()))
			// Standard Error: 2_222
			.saturating_add(Weight::from_parts(86_970, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 62).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252 + b * (20 ±0)`
		//  Estimated: `7087`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_446_692, 7087)
			// Standard Error: 2_729
			.saturating_add(Weight::from_parts(82_253, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidacyBond` (r:0 w:1)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 99]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1310 + c * (61 ±0)`
		//  Estimated: `7087 + c * (64 ±0)`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(57_387_147, 7087)
			// Standard Error: 2_333
			.saturating_add(Weight::from_parts(68_617, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Stake` (r:3 w:1)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:1 w:1)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:2)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:2)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn take_candidate_slot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7494`
		//  Estimated: `10959`
		// Minimum execution time: 147_000_000 picoseconds.
		Weight::from_parts(151_000_000, 10959)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351 + c * (56 ±0)`
		//  Estimated: `7087`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(19_370_419, 7087)
			// Standard Error: 934
			.saturating_add(Weight::from_parts(51_690, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `320`
		//  Estimated: `3525`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3525)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:97 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UnstakingRequests` (r:97 w:97)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:97)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `363 + c * (92 ±0)`
		//  Estimated: `7087 + c * (2507 ±0) + r * (2832 ±0)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 7087)
			// Standard Error: 183_596
			.saturating_add(Weight::from_parts(9_101_424, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2507).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 2832).saturating_mul(r.into()))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:1 w:1)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:1)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `731 + c * (63 ±0)`
		//  Estimated: `7087`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(51_389_787, 7087)
			// Standard Error: 1_897
			.saturating_add(Weight::from_parts(98_844, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:1)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:1 w:1)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	/// The range of component `u` is `[0, 15]`.
	fn unstake_from(c: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1186 + c * (64 ±0) + u * (20 ±0)`
		//  Estimated: `7087`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(24_898_853, 7087)
			// Standard Error: 926
			.saturating_add(Weight::from_parts(106_446, 0).saturating_mul(c.into()))
			// Standard Error: 5_894
			.saturating_add(Weight::from_parts(44_010, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:17 w:16)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:1 w:1)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[16, 100]`.
	/// The range of component `s` is `[1, 16]`.
	fn unstake_all(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369 + c * (56 ±0) + s * (95 ±0)`
		//  Estimated: `7087 + s * (2563 ±0)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(40_000_000, 7087)
			// Standard Error: 6_459
			.saturating_add(Weight::from_parts(26_078, 0).saturating_mul(c.into()))
			// Standard Error: 41_343
			.saturating_add(Weight::from_parts(13_623_795, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2563).saturating_mul(s.into()))
	}
	/// Storage: `CollatorSelection::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 16]`.
	fn claim(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `435 + c * (53 ±0)`
		//  Estimated: `3822`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(12_338_645, 3822)
			// Standard Error: 31_714
			.saturating_add(Weight::from_parts(20_259_222, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorSelection::AutoCompound` (r:0 w:1)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn set_autocompound_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:0 w:1)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(35_000_000, 3581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ProducedBlocks` (r:2 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Rewards` (r:1 w:0)
	/// Proof: `CollatorSelection::Rewards` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:202 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:201 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::AutoCompound` (r:200 w:0)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `s` is `[0, 200]`.
	/// The range of component `a` is `[0, 100]`.
	fn reward_one_collator(_c: u32, s: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + a * (85 ±0) + c * (89 ±0) + s * (223 ±0)`
		//  Estimated: `7087 + s * (2591 ±0)`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 7087)
			// Standard Error: 29_561
			.saturating_add(Weight::from_parts(21_202_531, 0).saturating_mul(s.into()))
			// Standard Error: 59_066
			.saturating_add(Weight::from_parts(1_437_291, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(s.into()))
	}
	/// Storage: `CollatorSelection::Stake` (r:201 w:200)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:200 w:200)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:200 w:200)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:200 w:200)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 200]`.
	fn refund_stakers(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + s * (286 ±0)`
		//  Estimated: `3553 + s * (2591 ±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(2_319_619, 3553)
			// Standard Error: 73_980
			.saturating_add(Weight::from_parts(37_161_599, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(s.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `200 + b * (65 ±0)`
		//  Estimated: `1190 + b * (2540 ±0)`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(6_984_624, 1190)
			// Standard Error: 5_855
			.saturating_add(Weight::from_parts(2_562_612, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	/// The range of component `c` is `[1, 99]`.
	fn add_invulnerable(b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `890 + b * (20 ±0) + c * (65 ±0)`
		//  Estimated: `7087 + b * (40 ±1) + c * (62 ±0)`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(51_297_298, 7087)
			// Standard Error: 11_725
			.saturating_add(Weight::from_parts(139_437, 0).saturating_mul(b.into()))
			// Standard Error: 2_222
			.saturating_add(Weight::from_parts(86_970, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 62).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252 + b * (20 ±0)`
		//  Estimated: `7087`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_446_692, 7087)
			// Standard Error: 2_729
			.saturating_add(Weight::from_parts(82_253, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidacyBond` (r:0 w:1)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 99]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1310 + c * (61 ±0)`
		//  Estimated: `7087 + c * (64 ±0)`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(57_387_147, 7087)
			// Standard Error: 2_333
			.saturating_add(Weight::from_parts(68_617, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Stake` (r:3 w:1)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:1 w:1)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:2)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:2)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn take_candidate_slot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7494`
		//  Estimated: `10959`
		// Minimum execution time: 147_000_000 picoseconds.
		Weight::from_parts(151_000_000, 10959)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351 + c * (56 ±0)`
		//  Estimated: `7087`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(19_370_419, 7087)
			// Standard Error: 934
			.saturating_add(Weight::from_parts(51_690, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `320`
		//  Estimated: `3525`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3525)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:97 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UnstakingRequests` (r:97 w:97)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PendingExCandidates` (r:0 w:97)
	/// Proof: `CollatorSelection::PendingExCandidates` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `363 + c * (92 ±0)`
		//  Estimated: `7087 + c * (2507 ±0) + r * (2832 ±0)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 7087)
			// Standard Error: 183_596
			.saturating_add(Weight::from_parts(9_101_424, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2507).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 2832).saturating_mul(r.into()))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:1 w:1)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:1)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `731 + c * (63 ±0)`
		//  Estimated: `7087`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(51_389_787, 7087)
			// Standard Error: 1_897
			.saturating_add(Weight::from_parts(98_844, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:1 w:1)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:1 w:1)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	/// The range of component `u` is `[0, 15]`.
	fn unstake_from(c: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1186 + c * (64 ±0) + u * (20 ±0)`
		//  Estimated: `7087`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(24_898_853, 7087)
			// Standard Error: 926
			.saturating_add(Weight::from_parts(106_446, 0).saturating_mul(c.into()))
			// Standard Error: 5_894
			.saturating_add(Weight::from_parts(44_010, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:17 w:16)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:1 w:1)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[16, 100]`.
	/// The range of component `s` is `[1, 16]`.
	fn unstake_all(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369 + c * (56 ±0) + s * (95 ±0)`
		//  Estimated: `7087 + s * (2563 ±0)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(40_000_000, 7087)
			// Standard Error: 6_459
			.saturating_add(Weight::from_parts(26_078, 0).saturating_mul(c.into()))
			// Standard Error: 41_343
			.saturating_add(Weight::from_parts(13_623_795, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2563).saturating_mul(s.into()))
	}
	/// Storage: `CollatorSelection::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorSelection::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 16]`.
	fn claim(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `435 + c * (53 ±0)`
		//  Estimated: `3822`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(12_338_645, 3822)
			// Standard Error: 31_714
			.saturating_add(Weight::from_parts(20_259_222, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorSelection::AutoCompound` (r:0 w:1)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn set_autocompound_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:0 w:1)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(35_000_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ProducedBlocks` (r:2 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(5602), added: 6097, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Rewards` (r:1 w:0)
	/// Proof: `CollatorSelection::Rewards` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:202 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Stake` (r:201 w:0)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::AutoCompound` (r:200 w:0)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `s` is `[0, 200]`.
	/// The range of component `a` is `[0, 100]`.
	fn reward_one_collator(_c: u32, s: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + a * (85 ±0) + c * (89 ±0) + s * (223 ±0)`
		//  Estimated: `7087 + s * (2591 ±0)`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 7087)
			// Standard Error: 29_561
			.saturating_add(Weight::from_parts(21_202_531, 0).saturating_mul(s.into()))
			// Standard Error: 59_066
			.saturating_add(Weight::from_parts(1_437_291, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(s.into()))
	}
	/// Storage: `CollatorSelection::Stake` (r:201 w:200)
	/// Proof: `CollatorSelection::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:200 w:200)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:200 w:200)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::StakeCount` (r:200 w:200)
	/// Proof: `CollatorSelection::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 200]`.
	fn refund_stakers(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + s * (286 ±0)`
		//  Estimated: `3553 + s * (2591 ±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(2_319_619, 3553)
			// Standard Error: 73_980
			.saturating_add(Weight::from_parts(37_161_599, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes((4_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(s.into()))
	}
}
