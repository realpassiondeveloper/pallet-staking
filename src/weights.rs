
//! Autogenerated weights for `pallet_collator_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-05-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `PAR03651`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local-v")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/mythos-node
// benchmark
// pallet
// --chain=local-v
// --wasm-execution=compiled
// --pallet=pallet_collator_staking
// --steps=50
// --repeat=20
// --extrinsic=*
// --heap-pages=4096
// --output=./weights.rs
// --template=./.maintain/template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_collator_staking`.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn add_invulnerable(b: u32, c: u32, ) -> Weight;
	fn remove_invulnerable(b: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_candidacy_bond() -> Weight;
	fn register_as_candidate(c: u32, ) -> Weight;
	fn take_candidate_slot() -> Weight;
	fn leave_intent(c: u32, ) -> Weight;
	fn note_author() -> Weight;
	fn new_session(r: u32, c: u32, ) -> Weight;
	fn stake(c: u32, ) -> Weight;
	fn unstake_from(c: u32, ) -> Weight;
	fn unstake_all(c: u32, s: u32, ) -> Weight;
	fn claim(c: u32, ) -> Weight;
	fn set_autocompound_percentage() -> Weight;
	fn set_collator_reward_percentage() -> Weight;
	fn set_extra_reward() -> Weight;
	fn set_minimum_stake() -> Weight;
	fn stop_extra_reward() -> Weight;
	fn top_up_extra_rewards() -> Weight;
	fn reward_one_collator(c: u32, s: u32, a: u32, ) -> Weight;
}

/// Weights for `pallet_collator_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `200 + b * (65 ±0)`
		//  Estimated: `1190 + b * (2540 ±0)`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(6_913_875, 1190)
			// Standard Error: 7_524
			.saturating_add(Weight::from_parts(2_609_593, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:1 w:0)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	/// The range of component `c` is `[1, 99]`.
	fn add_invulnerable(b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `803 + b * (20 ±0) + c * (43 ±0)`
		//  Estimated: `5487 + b * (26 ±0) + c * (43 ±0)`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(21_624_273, 5487)
			// Standard Error: 6_791
			.saturating_add(Weight::from_parts(65_452, 0).saturating_mul(b.into()))
			// Standard Error: 1_287
			.saturating_add(Weight::from_parts(57_535, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 26).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252 + b * (20 ±0)`
		//  Estimated: `5487`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_718_915, 5487)
			// Standard Error: 2_962
			.saturating_add(Weight::from_parts(64_171, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBond` (r:0 w:1)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:2 w:1)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:1)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 99]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1831 + c * (47 ±0)`
		//  Estimated: `6116 + c * (51 ±0)`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(50_532_388, 6116)
			// Standard Error: 3_408
			.saturating_add(Weight::from_parts(104_552, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 51).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Stake` (r:3 w:2)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:2 w:2)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:2)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn take_candidate_slot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6689`
		//  Estimated: `10154`
		// Minimum execution time: 109_000_000 picoseconds.
		Weight::from_parts(112_000_000, 10154)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:1 w:1)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:1)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1273 + c * (44 ±0)`
		//  Estimated: `5487`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(27_530_940, 5487)
			// Standard Error: 2_225
			.saturating_add(Weight::from_parts(88_065, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `320`
		//  Estimated: `3525`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3525)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:97 w:97)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::UnstakingRequests` (r:97 w:97)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:97 w:97)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5564 + c * (76 ±0) + r * (92 ±0)`
		//  Estimated: `5487 + c * (2507 ±0) + r * (2832 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_000_000, 5487)
			// Standard Error: 290_071
			.saturating_add(Weight::from_parts(12_123_343, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2507).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 2832).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:0)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:1 w:1)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1200 + c * (51 ±0)`
		//  Estimated: `5487`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(30_819_050, 5487)
			// Standard Error: 3_376
			.saturating_add(Weight::from_parts(137_084, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:1 w:1)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:1)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn unstake_from(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1206 + c * (44 ±0)`
		//  Estimated: `5487`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(24_377_711, 5487)
			// Standard Error: 2_475
			.saturating_add(Weight::from_parts(88_890, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:117 w:16)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:1)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[16, 100]`.
	/// The range of component `s` is `[1, 16]`.
	fn unstake_all(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `864 + c * (136 ±0) + s * (62 ±0)`
		//  Estimated: `5487 + c * (2563 ±0) + s * (2563 ±0)`
		// Minimum execution time: 292_000_000 picoseconds.
		Weight::from_parts(293_000_000, 5487)
			// Standard Error: 33_131
			.saturating_add(Weight::from_parts(1_510_021, 0).saturating_mul(c.into()))
			// Standard Error: 212_046
			.saturating_add(Weight::from_parts(4_891_283, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2563).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 2563).saturating_mul(s.into()))
	}
	/// Storage: `CollatorStaking::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 16]`.
	fn claim(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `384 + c * (20 ±0)`
		//  Estimated: `3822`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(10_170_702, 3822)
			// Standard Error: 18_141
			.saturating_add(Weight::from_parts(8_263_736, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::AutoCompound` (r:0 w:1)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn set_autocompound_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:0 w:1)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `1501`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ProducedBlocks` (r:2 w:1)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Rewards` (r:1 w:0)
	/// Proof: `CollatorStaking::Rewards` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:3 w:0)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:2 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `s` is `[1, 1000]`.
	/// The range of component `a` is `[0, 100]`.
	fn reward_one_collator(c: u32, s: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `775 + c * (70 ±0)`
		//  Estimated: `8679`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(42_654_461, 8679)
			// Standard Error: 20_020
			.saturating_add(Weight::from_parts(283_692, 0).saturating_mul(c.into()))
			// Standard Error: 312
			.saturating_add(Weight::from_parts(6_541, 0).saturating_mul(s.into()))
			// Standard Error: 3_114
			.saturating_add(Weight::from_parts(14_085, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `200 + b * (65 ±0)`
		//  Estimated: `1190 + b * (2540 ±0)`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(6_913_875, 1190)
			// Standard Error: 7_524
			.saturating_add(Weight::from_parts(2_609_593, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:1 w:0)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	/// The range of component `c` is `[1, 99]`.
	fn add_invulnerable(b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `803 + b * (20 ±0) + c * (43 ±0)`
		//  Estimated: `5487 + b * (26 ±0) + c * (43 ±0)`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(21_624_273, 5487)
			// Standard Error: 6_791
			.saturating_add(Weight::from_parts(65_452, 0).saturating_mul(b.into()))
			// Standard Error: 1_287
			.saturating_add(Weight::from_parts(57_535, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 26).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252 + b * (20 ±0)`
		//  Estimated: `5487`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_718_915, 5487)
			// Standard Error: 2_962
			.saturating_add(Weight::from_parts(64_171, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBond` (r:0 w:1)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:2 w:1)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:1)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 99]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1831 + c * (47 ±0)`
		//  Estimated: `6116 + c * (51 ±0)`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(50_532_388, 6116)
			// Standard Error: 3_408
			.saturating_add(Weight::from_parts(104_552, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 51).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Stake` (r:3 w:2)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:2 w:2)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:2)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn take_candidate_slot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6689`
		//  Estimated: `10154`
		// Minimum execution time: 109_000_000 picoseconds.
		Weight::from_parts(112_000_000, 10154)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:1 w:1)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:1)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1273 + c * (44 ±0)`
		//  Estimated: `5487`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(27_530_940, 5487)
			// Standard Error: 2_225
			.saturating_add(Weight::from_parts(88_065, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `320`
		//  Estimated: `3525`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3525)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:97 w:97)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::UnstakingRequests` (r:97 w:97)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:97 w:97)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5564 + c * (76 ±0) + r * (92 ±0)`
		//  Estimated: `5487 + c * (2507 ±0) + r * (2832 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_000_000, 5487)
			// Standard Error: 290_071
			.saturating_add(Weight::from_parts(12_123_343, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2507).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 2832).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:0)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:1 w:1)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1200 + c * (51 ±0)`
		//  Estimated: `5487`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(30_819_050, 5487)
			// Standard Error: 3_376
			.saturating_add(Weight::from_parts(137_084, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:1 w:1)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:1)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn unstake_from(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1206 + c * (44 ±0)`
		//  Estimated: `5487`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(24_377_711, 5487)
			// Standard Error: 2_475
			.saturating_add(Weight::from_parts(88_890, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:117 w:16)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::StakeCount` (r:1 w:1)
	/// Proof: `CollatorStaking::StakeCount` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[16, 100]`.
	/// The range of component `s` is `[1, 16]`.
	fn unstake_all(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `864 + c * (136 ±0) + s * (62 ±0)`
		//  Estimated: `5487 + c * (2563 ±0) + s * (2563 ±0)`
		// Minimum execution time: 292_000_000 picoseconds.
		Weight::from_parts(293_000_000, 5487)
			// Standard Error: 33_131
			.saturating_add(Weight::from_parts(1_510_021, 0).saturating_mul(c.into()))
			// Standard Error: 212_046
			.saturating_add(Weight::from_parts(4_891_283, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2563).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 2563).saturating_mul(s.into()))
	}
	/// Storage: `CollatorStaking::UnstakingRequests` (r:1 w:1)
	/// Proof: `CollatorStaking::UnstakingRequests` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 16]`.
	fn claim(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `384 + c * (20 ±0)`
		//  Estimated: `3822`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(10_170_702, 3822)
			// Standard Error: 18_141
			.saturating_add(Weight::from_parts(8_263_736, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::AutoCompound` (r:0 w:1)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn set_autocompound_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:0 w:1)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `1501`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `1501`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ProducedBlocks` (r:2 w:1)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateList` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateList` (`max_values`: Some(1), `max_size`: Some(4002), added: 4497, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Rewards` (r:1 w:0)
	/// Proof: `CollatorStaking::Rewards` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Stake` (r:3 w:0)
	/// Proof: `CollatorStaking::Stake` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:2 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `s` is `[1, 1000]`.
	/// The range of component `a` is `[0, 100]`.
	fn reward_one_collator(c: u32, s: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `775 + c * (70 ±0)`
		//  Estimated: `8679`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(42_654_461, 8679)
			// Standard Error: 20_020
			.saturating_add(Weight::from_parts(283_692, 0).saturating_mul(c.into()))
			// Standard Error: 312
			.saturating_add(Weight::from_parts(6_541, 0).saturating_mul(s.into()))
			// Standard Error: 3_114
			.saturating_add(Weight::from_parts(14_085, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
